/*
 * File: app/controller/NavController.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Fulfill.controller.NavController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            orderDetail: {
                autoCreate: true,
                selector: 'orderdetail',
                xtype: 'orderdetail'
            },
            itemDetail: {
                autoCreate: true,
                selector: 'itemdetail',
                xtype: 'itemdetail'
            },
            ordersNavView: {
                selector: 'ordersnavview',
                xtype: 'ordersnavview'
            },
            itemsNavView: {
                selector: 'itemsnavview',
                xtype: 'itemsnavview'
            },
            itemPick: {
                autoCreate: true,
                selector: 'itempick',
                xtype: 'itempick'
            },
            orderConfirm: {
                autoCreate: true,
                selector: 'orderconfirm',
                xtype: 'orderconfirm'
            },
            home: 'home',
            legend: 'legend',
            employeesNavView: {
                selector: 'employeesnavview',
                xtype: 'employeesnavview'
            },
            employeeEdit: {
                autoCreate: true,
                selector: 'employeeedit',
                xtype: 'employeeedit'
            },
            newEmployeeButton: {
                selector: 'employeesnavview #newEmployeeButton',
                xtype: 'Ext.Button'
            },
            saveEmployeeButton: '#saveEmployeeButton',
            removeEmployeeButton: '#removeEmployeeButton'
        },

        control: {
            "orderlist": {
                itemtap: 'onOrderTap',
                show: 'onOrderListShow',
                segbuttontap: 'onListSegbuttontap'
            },
            "orderdetail": {
                itemselect: 'onItemSelect',
                shipordertap: 'onShipOrderTap'
            },
            "itempick": {
                itempick: 'onItemPick'
            },
            "orderconfirm": {
                confirmtap: 'onConfirmTap'
            },
            "dashboard": {
                show: 'onPanelShow'
            },
            "saleshistorychart": {
                filterstatechange: 'onChartFilterStateChange'
            },
            "itemlist": {
                show: 'onInventoryShow',
                itemtap: 'onInventoryItemTap'
            },
            "employeelist": {
                show: 'onEmployeeListShow',
                itemtap: 'onEmployeeSelect'
            },
            "employeesnavview #newEmployeeButton": {
                tap: 'onNewEmployeeTap'
            },
            "employeeedit #saveEmployeeButton": {
                tap: 'onSaveEmployeeTap'
            },
            "employeeedit #removeEmployeeButton": {
                tap: 'onRemoveEmployeeTap'
            }
        }
    },

    onOrderTap: function(dataview, index, target, record, e, eOpts) {
        var nav = this.getOrdersNavView(),
            orderId = record.get('orderId'),
            detail = this.getOrderDetail({ title: 'Order ' + orderId }),
            store = Ext.StoreMgr.lookup('lineItemsStore'),
            home = this.getHome();
        home.getTabBar().hide();
        Fulfill.activeOrderId = orderId;
        detail.setData(record.data);
        store.removeAll();
        store.load({
            params: {
                orderId: orderId
            }
        });
        nav.push(detail);
    },

    onItemSelect: function(record, eventOptions) {
        var nav = this.getOrdersNavView(),
            itemPick = this.getItemPick({
                title: 'Item ' + record.get('itemId')
            });
        itemPick.setRecord(record);
        nav.push(itemPick);
    },

    onItemPick: function(eventOptions) {
        var nav = this.getOrdersNavView(),
            itemPick = nav.getActiveItem(),
            record = itemPick.getRecord();

        nav.pop();
        // setting isPacked prior to popping itemPick off will cause the dataview
        // to render offscreen and become jumbled.

        // toggle packed status
        var shipDate = record.get('packDate'),
            lineItemId = record.get('lineItemId');

        if (!shipDate) {
            Fulfill.ss.DXOrders.packLineItem(lineItemId);
            record.set('packDate', new Date());
        } else {
            Fulfill.ss.DXOrders.unpackLineItem(lineItemId);
            record.set('packDate', null);
        }
    },

    onShipOrderTap: function(eventOptions) {
        var nav = this.getOrdersNavView(),
            orderConfirm = this.getOrderConfirm(),
            record = Ext.StoreMgr.lookup('ordersStore').getById(Fulfill.activeOrderId),
            data = record.data,
            o = Ext.apply({
                packedItems: [],
                unpackedItems: [],
                shippedItems: []
            }, data);
        Ext.StoreMgr.lookup('lineItemsStore').each(function(record) {
            if (record.get('packDate')) {
                if (record.get('shipDate')) {
                    o.shippedItems.push(record.data);
                } else {
                    o.packedItems.push(record.data);
                }
            } else {
                o.unpackedItems.push(record.data);
            }
        });

        if (o.packedItems.length) {
            orderConfirm.setData(o);
            nav.push(orderConfirm);
        } else {
            Ext.Msg.alert('Error', 'No items have been packed yet.');
        }
    },

    onConfirmTap: function(eventOptions) {
        var nav = this.getOrdersNavView(),
            orderId = Fulfill.activeOrderId,
            lineItemIds = [];
        // TODO: Loading indicator
        Ext.StoreMgr.lookup('lineItemsStore').each(function(record) {
            if (record.get('packDate')) {
                lineItemIds.push(record.get('lineItemId'));
            }
        });

        // TODO: Loading indicator
        Fulfill.ss.DXOrders.shipOrder(orderId, lineItemIds, function(res) {
            var ordersStore = Ext.StoreMgr.lookup('ordersStore'),
                itemsStore = Ext.StoreMgr.lookup('lineItemsStore');
            // TODO: Confirm entire order, remove from list if fulfilled.
            nav.reset();
            for (var i = 0, ln = lineItemIds.length; i < ln; i++) {
                itemsStore.getById(lineItemIds[i]).set('shipDate', new Date());
            }
            if (!res.remainingLineItems) {
                ordersStore.remove(ordersStore.getById(orderId));
                // remove this orderId from the Orders store
            }
        });

    },

    onOrderListShow: function(component, eOpts) {
        this.getHome().getTabBar().show();
    },

    onPanelShow: function(component, eOpts) {
        this.getHome().getTabBar().show();
        Ext.StoreManager.lookup('pieChartDataStore').load();
        Ext.StoreManager.lookup('salesHistoryStore').load({
            params: {category: null}
        });
    },

    onChartFilterStateChange: function(filterIndex, filterDisabled, eventOptions) {
        var pieChart = Ext.getCmp('pieChart'),
            series = pieChart.getSeries()[0],
            segButton = Ext.getCmp('segButton'),
            buttons = segButton.getItems(),
            pressedButtons = segButton.getPressedButtons(),
            button = buttons.getAt(filterIndex);


        segButton.setPressedButtons([pressedButtons[0]]);
        if (filterDisabled) {
            pressedButtons = Ext.Array.remove(pressedButtons, button);
        } else {
            pressedButtons.push(button);
        }
        console.dir(pressedButtons);
        segButton.setPressedButtons(pressedButtons);
        series.setHiddenByIndex(filterIndex, filterDisabled);

        var filters = [];
        for (var i = 0, ln = pressedButtons.length; i < ln; i++) {
            filters.push(pressedButtons[i].getText());
        }
        var filter = new RegExp(filters.join('|'));
        Ext.StoreManager.lookup('ordersStore').filter('category', filter);
    },

    onListSegbuttontap: function(category, pressed, eventOptions) {
        var legend = this.getLegend(),
            legendStore = legend.getStore();
        legendStore.findRecord('name', category).set('disabled', !pressed);
    },

    onInventoryShow: function(component, eOpts) {
        this.getHome().getTabBar().show();

        Ext.StoreManager.lookup('itemsStore').load();
    },

    onInventoryItemTap: function(dataview, index, target, record, e, eOpts) {
        var nav = this.getItemsNavView(),
            itemId = record.get('itemId'),
            detail = this.getItemDetail({ title: record.get('name') }),
            home = this.getHome(),
            store = Ext.StoreManager.lookup('ordersByItemStore').load({
                params: {
                    itemId: itemId
                }
            }),
            description = detail.child("#inventoryItemDescription"),
            list = detail.child("#orderListByItem");
        list.setStore(store);
        list.refresh();
        home.getTabBar().hide();
        description.setData(record.data);
        nav.push(detail);
    },

    onEmployeeListShow: function(component, eOpts) {
        this.getHome().getTabBar().show();
        this.getNewEmployeeButton().show();
    },

    onNewEmployeeTap: function(button, e, eOpts) {
        var nav = this.getEmployeesNavView(),
            home = this.getHome(),
            employeeEdit = this.getEmployeeEdit({
                title: 'New employee'
            }),
            newEmployee = Ext.create('Fulfill.model.Employee');

        home.getTabBar().hide();
        this.getNewEmployeeButton().hide();

        employeeEdit.setRecord(newEmployee);

        this.getRemoveEmployeeButton().hide();

        nav.push(employeeEdit);
    },

    onEmployeeSelect: function(dataview, index, target, record, e, eOpts) {
        var nav = this.getEmployeesNavView(),
            home = this.getHome(),
            employeeEdit = this.getEmployeeEdit({
                title: record.get('name')
            }),
            properties = employeeEdit.child('#employeeEditProperties'),
            name = properties.child('#employeeEditName'),
            title = properties.child('#employeeEditTitle');

        home.getTabBar().hide();
        this.getNewEmployeeButton().hide();

        employeeEdit.setRecord(record);
        name.setValue(record.get('name'));
        title.setValue(record.get('title'));

        this.getRemoveEmployeeButton().show();

        nav.push(employeeEdit);
    },

    onSaveEmployeeTap: function(button, e, eOpts) {
        var employee = this.getEmployeeEdit().getRecord(),
            isNew = !!employee.get('employeeId'),
            nav = this.getEmployeesNavView(),
            employeeEdit = this.getEmployeeEdit(),
            properties = employeeEdit.child('#employeeEditProperties'),
            name = properties.child('#employeeEditName').getValue(),
            title = properties.child('#employeeEditTitle').getValue();

        employee.set({
            name: name,
            title: title
        });

        if (isNew) {
            var store = Ext.StoreManager.get('employeesStore');
            store.add(employee);
        }

        nav.pop();
    },

    onRemoveEmployeeTap: function(button, e, eOpts) {
        var employee = this.getEmployeeEdit().getRecord(),
            nav = this.getEmployeesNavView(),
            store = Ext.StoreManager.get('employeesStore');

        store.remove(employee);

        nav.pop();
    }

});